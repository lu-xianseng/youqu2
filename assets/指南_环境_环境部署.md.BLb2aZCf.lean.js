import{_ as a,c as i,R as e,o as t}from"./chunks/framework.Aqiy0hvI.js";const k=JSON.parse('{"title":"环境部署 - env.sh","description":"","frontmatter":{},"headers":[],"relativePath":"指南/环境/环境部署.md","filePath":"指南/环境/环境部署.md","lastUpdated":1726024303000}'),l={name:"指南/环境/环境部署.md"};function n(p,s,h,d,o,c){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="环境部署-env-sh" tabindex="-1">环境部署 - env.sh <a class="header-anchor" href="#环境部署-env-sh" aria-label="Permalink to &quot;环境部署 - env.sh&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>项目根目录下运行 <code>env.sh</code> 即可。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env.sh</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">密码问题</p><p>使用的默认密码是 <code>1</code>；</p><p>您可以使用 <code>-p</code> 选项传入密码：<code>bash env.sh -p \${my_password}</code>；</p><p>也可以修改配置文件 <code>setting/globalconfig.ini</code> 里面的 <code>PASSWORD</code> 配置项；</p></div><h2 id="定制依赖" tabindex="-1">定制依赖 <a class="header-anchor" href="#定制依赖" aria-label="Permalink to &quot;定制依赖&quot;">​</a></h2><h3 id="_1-新增依赖" tabindex="-1">1. 新增依赖 <a class="header-anchor" href="#_1-新增依赖" aria-label="Permalink to &quot;1. 新增依赖&quot;">​</a></h3><p>如果应用库还需要其他 <code>Python</code> 依赖库，只需要在应用库根目录下保存一个 <code>requirement.txt</code> 文件；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autotest_xxx</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirement.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>里面写入需要安装的三方依赖，比如像这样：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PyYAML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 指定安装某个版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requests</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 未指定版本则安装最新版</span></span></code></pre></div><p>在执行 <code>bash env.sh</code> 时会一并将其安装。</p><p>如果多个应用库都存在 <code>requirement.txt</code> 文件，执行 <code>env.sh</code> 时会将多个 <code>requirement.txt</code> 文件一并加载；那么一定要注意多个 <code>requirement.txt</code> 文件可能存在相同的依赖被指定安装不同版本等等兼容性问题。</p><p><strong>【deb 形式 Python 包】</strong></p><p>在应用库根目录下保存一个 <code>requirement_deb.txt</code> 文件；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autotest_xxx</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirement_deb.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>里面写入需要安装的三方依赖，比如像这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>python3-pyaudio</span></span></code></pre></div><h3 id="_2-裁剪依赖" tabindex="-1">2. 裁剪依赖 <a class="header-anchor" href="#_2-裁剪依赖" aria-label="Permalink to &quot;2. 裁剪依赖&quot;">​</a></h3><p>在某些情况下，可能你只需要安装一些最最基础的依赖，其他的都不需要，比如纯接口自动化的项目，它不需要 <code>UI</code> 自动化相关的依赖。</p><p>你只需要在应用库根目录下，存放一个 <code>BASICENV</code> 的普通文件，里面不需要写任何内容，这样执行 <code>env.sh</code> 时，只会安装最基础的依赖。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autotest_xxx</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BASICENV</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 可以使用：touch BASICENV 创建文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>基础依赖仅安装最基础的几个包；</p><p><code>裁剪依赖</code> 和 <code>新增依赖</code> 是不冲突的，可以同时使用。</p><h2 id="开发环境部署" tabindex="-1">开发环境部署 <a class="header-anchor" href="#开发环境部署" aria-label="Permalink to &quot;开发环境部署&quot;">​</a></h2><p>在开发过程中，如果你想直接部署在本机上：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><p>这种方式安装的环境不会有 <code>youqu</code> 这个命令，用例执行都使用 <code>python3</code> 驱动：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><h2 id="虚拟环境解释器" tabindex="-1">虚拟环境解释器 <a class="header-anchor" href="#虚拟环境解释器" aria-label="Permalink to &quot;虚拟环境解释器&quot;">​</a></h2><p>YouQu 默认采用虚拟化部署，虚拟环境实际安装的位置是在 <code>$HOME/.local/share/virtualenvs/youqu-oHTM7l7G</code> 目录下；其中，</p><p><code>youqu-oHTM7l7G</code> 此目录名称前面部分是你的代码根目录的名称，后面部分是生成的随机字符串。</p><h2 id="激活虚拟环境" tabindex="-1">激活虚拟环境 <a class="header-anchor" href="#激活虚拟环境" aria-label="Permalink to &quot;激活虚拟环境&quot;">​</a></h2><p>在开发过程中有可能需要在终端激活虚拟环境，以便进行一些开发调试；</p><p>在框架根目录下命令行输入：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youqu-shell</span></span></code></pre></div><p>即可在终端激活当前虚拟环境。</p><h2 id="删除虚拟环境" tabindex="-1">删除虚拟环境 <a class="header-anchor" href="#删除虚拟环境" aria-label="Permalink to &quot;删除虚拟环境&quot;">​</a></h2><p>在项目根目录下输入：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youqu-rm</span></span></code></pre></div><h2 id="依赖治理" tabindex="-1">依赖治理 <a class="header-anchor" href="#依赖治理" aria-label="Permalink to &quot;依赖治理&quot;">​</a></h2><p style="background:-webkit-linear-gradient(120deg, #bd34fe 30%, #41d1ff);background-clip:text;-webkit-background-clip:text;-webkit-text-fill-color:transparent;"><b>依赖治理原则</b></p><p><strong>依赖最少化</strong>——始终保持最少的依赖项。</p><p style="background:-webkit-linear-gradient(120deg, #bd34fe 30%, #41d1ff);background-clip:text;-webkit-background-clip:text;-webkit-text-fill-color:transparent;"><b>依赖治理思路</b></p><ul><li><p><strong>使用标准库</strong></p><p>尽量使用标准库或系统预装库来实现功能。</p><p>如果确实需要引入三方库，应该尽量将三方库里面使用到的部分剥离出来使用，从而避免全量引入三方库。</p></li><li><p><strong>面向服务的架构设计</strong></p><p>将功能进行服务化封装部署，通过服务接口、远程过程调用等方式提供功能。</p></li></ul><p style="background:-webkit-linear-gradient(120deg, #bd34fe 30%, #41d1ff);background-clip:text;-webkit-background-clip:text;-webkit-text-fill-color:transparent;"><b>依赖治理的意义</b></p><p>大多数情况下，在写一些功能时，首先想到的就是去搜索看有没有现成的工具直接能用，行话叫不要重复造轮子。</p><p>但这样做有一个很严重的问题，就是当你写一个大型项目时，会引入非常非常多的依赖。</p><p>依赖项越多，依赖关系就越复杂，后期越容易出问题，如依赖关系错乱冲突导致安装失败、依赖安装下载过程网络波动导致安装失败、安装过程耗时等等问题。</p>`,49)]))}const g=a(l,[["render",n]]);export{k as __pageData,g as default};
