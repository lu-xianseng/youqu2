import{_ as e,c as l,R as t,o as r}from"./chunks/framework.Aqiy0hvI.js";const u=JSON.parse('{"title":"未来规划","description":"","frontmatter":{},"headers":[],"relativePath":"规划/未来规划.md","filePath":"规划/未来规划.md","lastUpdated":1726024303000}'),p={name:"规划/未来规划.md"};function i(o,a,n,s,d,c){return r(),l("div",null,a[0]||(a[0]=[t('<h1 id="未来规划" tabindex="-1">未来规划 <a class="header-anchor" href="#未来规划" aria-label="Permalink to &quot;未来规划&quot;">​</a></h1><h2 id="💡-桌面应用性能自动化测试" tabindex="-1">💡 桌面应用性能自动化测试 <a class="header-anchor" href="#💡-桌面应用性能自动化测试" aria-label="Permalink to &quot;💡 桌面应用性能自动化测试&quot;">​</a></h2><h3 id="需优化解决的性能自动化问题" tabindex="-1">需优化解决的性能自动化问题 <a class="header-anchor" href="#需优化解决的性能自动化问题" aria-label="Permalink to &quot;需优化解决的性能自动化问题&quot;">​</a></h3><p>1、环境问题，测试人员在本地编写代码，环境不好搭建，框架只提供 Docker 环境部署，适合在生产环境运行，但是对测试人员本地编写代码安装环境很不友好，因为代码编辑器调试代码只能通过入口文件执行，不能在编辑器中直接执行单个用例脚本；</p><p>2、在 Docker 里面执行，代码报错看不到报错信息，不好定位问题；</p><p>3、强制依赖串口线，不插串口线，环境也无法部署，给想要尝试或者愿意尝试的人员造成了一些困扰，还依赖较多设备（服务端-测试机），一些团队并不能找到那么多机器；</p><p>4、那些好不容易尝试用起来的人员，使用一段时间后会痛恨 1 和 2 的问题，让他们觉得难度有点大，团队中普遍人员代码能力不强，尝试人员都觉得难搞，其他人员也就可想而知；</p><h3 id="方案" tabindex="-1">方案 <a class="header-anchor" href="#方案" aria-label="Permalink to &quot;方案&quot;">​</a></h3><p>性能自动化支持以下功能</p><p>1、因地制宜（手上有什么设备就用什么方案）</p><p>【低配版】只有一台机器</p><ul><li><p>本机执行方案；</p></li><li><p>本机执行，本机同步解析；</p></li><li><p>本机执行，外部机器异步解析；</p></li></ul><p>【中配版】有两台机器，有网络，但是没有串口线</p><ul><li>服务端-客户端，通过远程网络连接控制。</li></ul><p>【高配版】有两台机器，并且有串口线，有没有网络无所谓</p><ul><li>服务端-客户端，通过串口线连接控制。</li></ul><p>【顶配版】高配 + 继电器</p><ul><li>最完美的方案。</li></ul><p>2、环境安装、代码调试环境、执行环境要对编码人员更加友好；</p>',19)]))}const m=e(p,[["render",i]]);export{u as __pageData,m as default};
